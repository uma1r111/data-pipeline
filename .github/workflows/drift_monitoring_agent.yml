name: Drift Monitoring Agent

on:
  workflow_dispatch: # Manual trigger
  schedule:
    - cron: '0 6 * * *' # Daily at 6 AM UTC (11 AM Karachi time)
  workflow_run:
    workflows: ["Feature Engineering"]
    types:
      - completed

env:
  GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

jobs:
  drift-monitoring:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pandas numpy scipy scikit-learn
        pip install google-generativeai  # For Gemini LLM integration
        pip install -r requirements.txt

    - name: Check if preprocessed data exists
      id: check_data
      run: |
        if [ -f "data/raw/full_preprocessed_aqi_weather_data_with_all_features.csv" ]; then
          echo "data_exists=true" >> $GITHUB_OUTPUT
          echo "Data file found, proceeding with drift analysis"
        else
          echo "data_exists=false" >> $GITHUB_OUTPUT
          echo "Warning: Preprocessed data not found, skipping drift analysis"
        fi

    - name: Run Drift Monitoring Agent
      if: steps.check_data.outputs.data_exists == 'true'
      run: |
        python agents/drift_monitoring_agent/drift_agent.py
      env:
        DATA_PATH: "data/raw/full_preprocessed_aqi_weather_data_with_all_features.csv"
        OUTPUT_PATH: "agents/drift_monitoring_agent/outputs/drift_analysis.json"

    - name: Generate LLM Analysis
      if: steps.check_data.outputs.data_exists == 'true'
      id: llm_analysis
      run: |
        python -c "
        import json
        import os
        import google.generativeai as genai
        
        # Configure Gemini API
        genai.configure(api_key=os.getenv('GEMINI_API_KEY'))
        model = genai.GenerativeModel('gemini-1.5-flash')
        
        # Load drift analysis results
        with open('agents/drift_monitoring_agent/outputs/drift_analysis.json', 'r') as f:
            drift_data = json.load(f)
        
        # Load prompt template
        with open('agents/drift_monitoring_agent/prompts/drift_analysis_prompt.txt', 'r') as f:
            prompt_template = f.read()
        
        # Fill prompt with actual data
        prompt = prompt_template.format(
            data_summary=json.dumps(drift_data['detailed_analysis'], indent=2)
        )
        
        # Call Gemini API
        response = model.generate_content(
            prompt,
            generation_config=genai.types.GenerationConfig(
                temperature=0.1,
                max_output_tokens=500,
                response_mime_type='application/json'
            )
        )
        
        # Parse LLM response
        llm_output = json.loads(response.text)
        
        # Save LLM analysis
        with open('agents/drift_monitoring_agent/outputs/drift_report.json', 'w') as f:
            json.dump(llm_output, f, indent=2)
        
        # Set output for next workflow
        print(f'::set-output name=seasonal_shift::{llm_output[\"seasonal_shift_detected\"]}')
        print(f'::set-output name=features_count::{len(llm_output[\"features_to_add\"])}')
        "

    - name: Validate Drift Report
      if: steps.check_data.outputs.data_exists == 'true'
      run: |
        python -c "
        import json
        import jsonschema
        
        # Define expected schema
        schema = {
            'type': 'object',
            'properties': {
                'seasonal_shift_detected': {'type': 'boolean'},
                'features_to_add': {
                    'type': 'array',
                    'items': {'type': 'string'}
                },
                'reasoning': {'type': 'string'}
            },
            'required': ['seasonal_shift_detected', 'features_to_add', 'reasoning']
        }
        
        # Validate output
        with open('agents/drift_monitoring_agent/outputs/drift_report.json', 'r') as f:
            report = json.load(f)
        
        jsonschema.validate(report, schema)
        print('âœ… Drift report validation successful')
        print(f'Seasonal shift detected: {report[\"seasonal_shift_detected\"]}')
        print(f'Features to add: {len(report[\"features_to_add\"])}')
        "

    - name: Commit drift analysis results
      if: steps.check_data.outputs.data_exists == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add drift analysis outputs
        git add agents/drift_monitoring_agent/outputs/
        
        # Only commit if there are changes
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "ðŸ¤– Drift analysis results - $(date '+%Y-%m-%d %H:%M')"
          git push
        fi

    - name: Create Issue if Drift Detected
      if: steps.check_data.outputs.data_exists == 'true' && steps.llm_analysis.outputs.seasonal_shift == 'true'
      run: |
        gh issue create \
          --title "ðŸš¨ Seasonal Drift Detected - Data Enrichment Required" \
          --body "## Drift Monitoring Alert

        The drift monitoring agent has detected significant seasonal shifts in the AQI prediction features.

        **Drift Analysis Results:**
        - Seasonal shift detected: âœ… True
        - Features to add: ${{ steps.llm_analysis.outputs.features_count }}
        - Timestamp: $(date)

        **Next Steps:**
        1. Data enrichment workflow triggered automatically
        2. Review suggested features in \`agents/drift_monitoring_agent/outputs/drift_report.json\`
        3. Monitor data collection for new features

        **Files Updated:**
        - \`agents/drift_monitoring_agent/outputs/drift_analysis.json\`
        - \`agents/drift_monitoring_agent/outputs/drift_report.json\`

        This issue will auto-close when the data enrichment workflow completes successfully." \
          --label "drift-alert,automated,high-priority"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Summary
      if: always()
      run: |
        echo "## Drift Monitoring Summary" >> $GITHUB_STEP_SUMMARY
        echo "- Data file exists: ${{ steps.check_data.outputs.data_exists }}" >> $GITHUB_STEP_SUMMARY
        if [ "${{ steps.check_data.outputs.data_exists }}" = "true" ]; then
          echo "- Seasonal shift detected: ${{ steps.llm_analysis.outputs.seasonal_shift }}" >> $GITHUB_STEP_SUMMARY
          echo "- Features recommended: ${{ steps.llm_analysis.outputs.features_count }}" >> $GITHUB_STEP_SUMMARY
          echo "- Next workflow: $([ "${{ steps.llm_analysis.outputs.seasonal_shift }}" = "true" ] && echo "Data Enrichment Triggered" || echo "No action needed")" >> $GITHUB_STEP_SUMMARY
        fi